						*args and **kwargs
		
*args упаковывает аргументы в кортеж под названием args
в функцию можно передать список или кортеж поставив перед ним звездочку в противном случаи создастся кортеж из одного елемнта(списка или кортежа)

>>> def test_args(*args):
...     print(args)
...
>>> test_args(1, 2, 3, 4, 5)
	(1, 2, 3, 4, 5)
>>> l = [1, 2, 3, 4, 5]
>>> l.append(6)
>>> test_args(*l)
	(1, 2, 3, 4, 5, 6)

*kwargs упаковывает именованые аргументы в словарь под названием kwargs
Конструкцию **kwargs нельзя располагать до *args

>>> def test_kwargs(**kwargs):
...     print(kwargs)
...
>>> test_kwargs(name='Ivan', age='20')
{'name': 'Ivan', 'age': '20'}
>>>


						if __name __ == '__main__':
							main()
выполнит только те функции которые находятсья в текущем файле(не импортированы из других модулей)


						Синтаксический сахар
						
						генераторы списков
в генераторах списков могут приминяться условия 
bmw_cars = [car for car in cars if car.startswith('bmw')]

						декораторы
обрертывают функцию, работают от стороны функции

						lambda
простая однострочная функция: func = lambda x: x*x , func(8) => 64

						map()
принимает два аргумента(функцию, список); выполняет функцию с каждым елементом списка

						filter()
фильтурет данные; принимает два аргумента(функцию, которая возвращает True или False(проще всего использовать lambda) и список данных)

						
	
						





